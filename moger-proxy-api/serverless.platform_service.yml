service: moger-proxy-api-platform-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.11
  region: us-west-2
  stage: ${opt:stage, "dev"}
  iam:
    role: platformServiceRole
  environment:
    AWS_REGION_NAME: ${file(./config.${self:provider.stage}.json):common.env.AWS_REGION_NAME}

functions:
  platformApi:
    handler: platform_service.main.handler
    events:
      - http:
          path: eks/scale-up
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
      - http:
          path: eks/scale-down
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
      - http:
          path: healthcheck
          method: get

resources:
  Resources:
    platformServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: platformServiceRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: platformServiceName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - eks:DescribeNodegroup
                    - eks:ListNodegroups
                    - eks:ListClusters
                    - eks:UpdateNodegroupConfig
                  Resource:
                    - "*"

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - arn:aws:cognito-idp:us-west-2:076354166327:userpool/us-west-2_DZ7Ip9Rcx

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    usePoetry: true
    pythonBin: python3